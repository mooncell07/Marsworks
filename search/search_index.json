{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome! + Marsworks is an Async. Python API Wrapper around NASA's Mars Rover Photos API with 100% API coverage. Currently this project is under development and possibilities of breaking changes in near future is huge until 1.x release. Getting Started + Installation: + pip install -U marsworks Usage: + #Lets get images using sols. import asyncio from marsworks import Client client = Client () async def main ( rover_name , sol ) -> list : images = await client . get_photo_by_sol ( rover_name , sol ) #You can pass camera too. return images imgs = asyncio . run ( main ( \"Curiosity\" , 956 )) print ( imgs [ 0 ] . img_src ) print ( imgs [ 0 ] . photo_id ) #and many more! #Lets get some mission manifest. import asyncio from marsworks import Client , Manifest client = Client () async def main ( rover_name ) -> Manifest : mfest = await client . get_mission_manifest ( rover_name ) return mfest mfst = asyncio . run ( main ( \"Spirit\" )) print ( mfst . landing_date ) print ( mfst . status ) #and more!","title":"Home"},{"location":"index.html#welcome","text":"Marsworks is an Async. Python API Wrapper around NASA's Mars Rover Photos API with 100% API coverage. Currently this project is under development and possibilities of breaking changes in near future is huge until 1.x release.","title":"Welcome!"},{"location":"index.html#getting-started","text":"","title":"Getting Started"},{"location":"index.html#installation","text":"pip install -U marsworks","title":"Installation:"},{"location":"index.html#usage","text":"#Lets get images using sols. import asyncio from marsworks import Client client = Client () async def main ( rover_name , sol ) -> list : images = await client . get_photo_by_sol ( rover_name , sol ) #You can pass camera too. return images imgs = asyncio . run ( main ( \"Curiosity\" , 956 )) print ( imgs [ 0 ] . img_src ) print ( imgs [ 0 ] . photo_id ) #and many more! #Lets get some mission manifest. import asyncio from marsworks import Client , Manifest client = Client () async def main ( rover_name ) -> Manifest : mfest = await client . get_mission_manifest ( rover_name ) return mfest mfst = asyncio . run ( main ( \"Spirit\" )) print ( mfst . landing_date ) print ( mfst . status ) #and more!","title":"Usage:"},{"location":"API-Reference/client.html","text":"__init__ ( self , * , api_key = None , session = None , suppress_warnings = False ) special + Client Constructor. Parameters: Name Type Description Default api_key str NASA API key . (optional) None session AsyncClient An AsyncClient object. (optional) None suppress_warnings bool Whether to suppress warnings. False Source code in marsworks\\client.py def __init__ ( self , * , api_key : str = None , session : httpx . AsyncClient = None , suppress_warnings : bool = False , ) -> None : \"\"\" Client Constructor. Arguments: api_key: NASA [API key](https://api.nasa.gov/). (optional) session: An [AsyncClient](https://www.python-httpx.org/api/#asyncclient) object. (optional) suppress_warnings: Whether to suppress warnings. \"\"\" # noqa: E501 self . __http = Rest ( api_key = api_key , session = session , suppress_warnings = suppress_warnings ) close ( self ) async + Closes the AsyncClient. Warning It can close user given AsyncClient session too. Source code in marsworks\\client.py async def close ( self ) -> None : \"\"\" Closes the AsyncClient. Warning: It can close user given [AsyncClient](https://www.python-httpx.org/api/#asyncclient) session too. \"\"\" # noqa: E501 await self . __http . close () get_mission_manifest ( self , name ) async + Gets the mission manifest of the rover passed in name arg. Parameters: Name Type Description Default name str Name of rover. (not case-sensitive) required Note name can be a class variable of Rover . Returns: Type Description Manifest A Manifest object containing mission's info. Source code in marsworks\\client.py async def get_mission_manifest ( self , name : str ) -> Manifest : \"\"\" Gets the mission manifest of the rover passed in `name` arg. Arguments: name : Name of rover. (not case-sensitive) Note: `name` can be a class variable of [Rover](../API-Reference/Choices/rover.md). Returns: A [Manifest](./manifest.md) object containing mission's info. \"\"\" # noqa: E501 name = name . upper () if name in Rover (): metadata = await self . __http . start ( name ) mfst = await metadata . manifest_content () return mfst else : raise BadArgumentError ( f \"name should be one of < { ', ' . join ( Rover ()) } >.\" ) get_photo_by_earthdate ( self , name , earth_date , * , camera = None ) async + Gets the photos taken by the given rover on the given date. We can sort the images with camera param. Parameters: Name Type Description Default name str Name of rover. (not case-sensitive) required earth_date date An datetime.date object. required camera str Camera with which photo is taken. (not case-sensitive) (Optional) None Note name can be a class variable of Rover . Note camera can be a class variable of Camera . Returns: Type Description list A list of Photo objects with url and info. Source code in marsworks\\client.py async def get_photo_by_earthdate ( self , name : str , earth_date : datetime . date , * , camera : str = None ) -> list : \"\"\" Gets the photos taken by the given rover on the given date. We can sort the images with `camera` param. Arguments: name : Name of rover. (not case-sensitive) earth_date: An [datetime.date](https://docs.python.org/3/library/datetime.html?highlight=datetime%20date#datetime.date) object. camera: Camera with which photo is taken. (not case-sensitive) (Optional) Note: `name` can be a class variable of [Rover](../API-Reference/Choices/rover.md). Note: `camera` can be a class variable of [Camera](../API-Reference/Choices/camera.md). Returns: A list of [Photo](./photo.md) objects with url and info. \"\"\" # noqa: E501 name , camera = name . upper (), camera . upper () if name in Rover (): camera = camera if camera in Camera () else None metadata = await self . __http . start ( name . name + \"/photos\" , earth_date = str ( earth_date ), camera = camera ) phto = await metadata . photo_content () return phto else : raise BadArgumentError ( f \"name should be one of < { ', ' . join ( Rover ()) } >.\" ) get_photo_by_sol ( self , name , sol , * , camera = None ) async + Gets the photos taken by the given rover on the given sol. We can sort the images with camera param. Parameters: Name Type Description Default name str Name of rover. (not case-sensitive) required sol Union[int, str] The sol when photo was captured. required camera Optional[str] Camera with which photo is taken. (not case-sensitive) (Optional) None Note name can be a class variable of Rover . Note camera can be a class variable of Camera . Returns: Type Description list A list of Photo objects with url and info. Source code in marsworks\\client.py async def get_photo_by_sol ( self , name : str , sol : typing . Union [ int , str ], * , camera : Optional [ str ] = None ) -> list : \"\"\" Gets the photos taken by the given rover on the given sol. We can sort the images with `camera` param. Arguments: name : Name of rover. (not case-sensitive) sol: The sol when photo was captured. camera: Camera with which photo is taken. (not case-sensitive) (Optional) Note: `name` can be a class variable of [Rover](../API-Reference/Choices/rover.md). Note: `camera` can be a class variable of [Camera](../API-Reference/Choices/camera.md). Returns: A list of [Photo](./photo.md) objects with url and info. \"\"\" # noqa: E501 name , camera = name . upper (), camera . upper () if name in Rover (): camera = camera if camera in Camera () else None metadata = await self . __http . start ( name + \"/photos\" , sol = sol , camera = camera ) phto = await metadata . photo_content () return phto else : raise BadArgumentError ( f \"name should be one of < { ', ' . join ( Rover ()) } >.\" ) read ( self , photo ) async + Reads the bytes of image url in photo. Parameters: Name Type Description Default photo Photo The Photo object whose image url is to be read. required Returns: Type Description BytesIO A BytesIO object. Source code in marsworks\\client.py @ensure_type async def read ( self , photo : Photo ) -> io . BytesIO : \"\"\" Reads the bytes of image url in photo. Arguments: photo : The [Photo](./photo.md) object whose image url is to be read. Returns: A [BytesIO](https://docs.python.org/3/library/io.html?highlight=bytesio#io.BytesIO) object. \"\"\" # noqa: E501 data = await self . __http . read ( photo . img_src ) return data save ( self , photo , fp ) async + Saves the image of Photo object. Parameters: Name Type Description Default photo Photo The Photo object whose image is to be saved. required fp Union[str, bytes, os.PathLike, io.BufferedIOBase] The file path (with name and extension) where the image has to be saved. required Returns: Type Description int Number of bytes written. Source code in marsworks\\client.py @ensure_type async def save ( self , photo : Photo , fp : Union [ str , bytes , os . PathLike , io . BufferedIOBase ] ) -> int : \"\"\" Saves the image of [Photo](./photo.md) object. Arguments: photo : The [Photo](./photo.md) object whose image is to be saved. fp: The file path (with name and extension) where the image has to be saved. Returns: Number of bytes written. \"\"\" # noqa: E501 read_data = await self . __http . read ( photo . img_src , bytes_ = True ) if isinstance ( fp , io . IOBase ) and fp . writable (): bw = fp . write ( read_data ) return bw else : with open ( fp , \"wb\" ) as f : return f . write ( read_data )","title":"Client"},{"location":"API-Reference/client.html#marsworks.client.Client.__init__","text":"Client Constructor. Parameters: Name Type Description Default api_key str NASA API key . (optional) None session AsyncClient An AsyncClient object. (optional) None suppress_warnings bool Whether to suppress warnings. False Source code in marsworks\\client.py def __init__ ( self , * , api_key : str = None , session : httpx . AsyncClient = None , suppress_warnings : bool = False , ) -> None : \"\"\" Client Constructor. Arguments: api_key: NASA [API key](https://api.nasa.gov/). (optional) session: An [AsyncClient](https://www.python-httpx.org/api/#asyncclient) object. (optional) suppress_warnings: Whether to suppress warnings. \"\"\" # noqa: E501 self . __http = Rest ( api_key = api_key , session = session , suppress_warnings = suppress_warnings )","title":"__init__()"},{"location":"API-Reference/client.html#marsworks.client.Client.close","text":"Closes the AsyncClient. Warning It can close user given AsyncClient session too. Source code in marsworks\\client.py async def close ( self ) -> None : \"\"\" Closes the AsyncClient. Warning: It can close user given [AsyncClient](https://www.python-httpx.org/api/#asyncclient) session too. \"\"\" # noqa: E501 await self . __http . close ()","title":"close()"},{"location":"API-Reference/client.html#marsworks.client.Client.get_mission_manifest","text":"Gets the mission manifest of the rover passed in name arg. Parameters: Name Type Description Default name str Name of rover. (not case-sensitive) required Note name can be a class variable of Rover . Returns: Type Description Manifest A Manifest object containing mission's info. Source code in marsworks\\client.py async def get_mission_manifest ( self , name : str ) -> Manifest : \"\"\" Gets the mission manifest of the rover passed in `name` arg. Arguments: name : Name of rover. (not case-sensitive) Note: `name` can be a class variable of [Rover](../API-Reference/Choices/rover.md). Returns: A [Manifest](./manifest.md) object containing mission's info. \"\"\" # noqa: E501 name = name . upper () if name in Rover (): metadata = await self . __http . start ( name ) mfst = await metadata . manifest_content () return mfst else : raise BadArgumentError ( f \"name should be one of < { ', ' . join ( Rover ()) } >.\" )","title":"get_mission_manifest()"},{"location":"API-Reference/client.html#marsworks.client.Client.get_photo_by_earthdate","text":"Gets the photos taken by the given rover on the given date. We can sort the images with camera param. Parameters: Name Type Description Default name str Name of rover. (not case-sensitive) required earth_date date An datetime.date object. required camera str Camera with which photo is taken. (not case-sensitive) (Optional) None Note name can be a class variable of Rover . Note camera can be a class variable of Camera . Returns: Type Description list A list of Photo objects with url and info. Source code in marsworks\\client.py async def get_photo_by_earthdate ( self , name : str , earth_date : datetime . date , * , camera : str = None ) -> list : \"\"\" Gets the photos taken by the given rover on the given date. We can sort the images with `camera` param. Arguments: name : Name of rover. (not case-sensitive) earth_date: An [datetime.date](https://docs.python.org/3/library/datetime.html?highlight=datetime%20date#datetime.date) object. camera: Camera with which photo is taken. (not case-sensitive) (Optional) Note: `name` can be a class variable of [Rover](../API-Reference/Choices/rover.md). Note: `camera` can be a class variable of [Camera](../API-Reference/Choices/camera.md). Returns: A list of [Photo](./photo.md) objects with url and info. \"\"\" # noqa: E501 name , camera = name . upper (), camera . upper () if name in Rover (): camera = camera if camera in Camera () else None metadata = await self . __http . start ( name . name + \"/photos\" , earth_date = str ( earth_date ), camera = camera ) phto = await metadata . photo_content () return phto else : raise BadArgumentError ( f \"name should be one of < { ', ' . join ( Rover ()) } >.\" )","title":"get_photo_by_earthdate()"},{"location":"API-Reference/client.html#marsworks.client.Client.get_photo_by_sol","text":"Gets the photos taken by the given rover on the given sol. We can sort the images with camera param. Parameters: Name Type Description Default name str Name of rover. (not case-sensitive) required sol Union[int, str] The sol when photo was captured. required camera Optional[str] Camera with which photo is taken. (not case-sensitive) (Optional) None Note name can be a class variable of Rover . Note camera can be a class variable of Camera . Returns: Type Description list A list of Photo objects with url and info. Source code in marsworks\\client.py async def get_photo_by_sol ( self , name : str , sol : typing . Union [ int , str ], * , camera : Optional [ str ] = None ) -> list : \"\"\" Gets the photos taken by the given rover on the given sol. We can sort the images with `camera` param. Arguments: name : Name of rover. (not case-sensitive) sol: The sol when photo was captured. camera: Camera with which photo is taken. (not case-sensitive) (Optional) Note: `name` can be a class variable of [Rover](../API-Reference/Choices/rover.md). Note: `camera` can be a class variable of [Camera](../API-Reference/Choices/camera.md). Returns: A list of [Photo](./photo.md) objects with url and info. \"\"\" # noqa: E501 name , camera = name . upper (), camera . upper () if name in Rover (): camera = camera if camera in Camera () else None metadata = await self . __http . start ( name + \"/photos\" , sol = sol , camera = camera ) phto = await metadata . photo_content () return phto else : raise BadArgumentError ( f \"name should be one of < { ', ' . join ( Rover ()) } >.\" )","title":"get_photo_by_sol()"},{"location":"API-Reference/client.html#marsworks.client.Client.read","text":"Reads the bytes of image url in photo. Parameters: Name Type Description Default photo Photo The Photo object whose image url is to be read. required Returns: Type Description BytesIO A BytesIO object. Source code in marsworks\\client.py @ensure_type async def read ( self , photo : Photo ) -> io . BytesIO : \"\"\" Reads the bytes of image url in photo. Arguments: photo : The [Photo](./photo.md) object whose image url is to be read. Returns: A [BytesIO](https://docs.python.org/3/library/io.html?highlight=bytesio#io.BytesIO) object. \"\"\" # noqa: E501 data = await self . __http . read ( photo . img_src ) return data","title":"read()"},{"location":"API-Reference/client.html#marsworks.client.Client.save","text":"Saves the image of Photo object. Parameters: Name Type Description Default photo Photo The Photo object whose image is to be saved. required fp Union[str, bytes, os.PathLike, io.BufferedIOBase] The file path (with name and extension) where the image has to be saved. required Returns: Type Description int Number of bytes written. Source code in marsworks\\client.py @ensure_type async def save ( self , photo : Photo , fp : Union [ str , bytes , os . PathLike , io . BufferedIOBase ] ) -> int : \"\"\" Saves the image of [Photo](./photo.md) object. Arguments: photo : The [Photo](./photo.md) object whose image is to be saved. fp: The file path (with name and extension) where the image has to be saved. Returns: Number of bytes written. \"\"\" # noqa: E501 read_data = await self . __http . read ( photo . img_src , bytes_ = True ) if isinstance ( fp , io . IOBase ) and fp . writable (): bw = fp . write ( read_data ) return bw else : with open ( fp , \"wb\" ) as f : return f . write ( read_data )","title":"save()"},{"location":"API-Reference/manifest.html","text":"A class representing a Manifest . Attributes: Name Type Description rover_id int ID of the rover. name str Name of the Rover. status str The Rover's mission status. max_sol int The most recent Martian sol from which photos exist. total_photos int Number of photos taken by that Rover. cameras dict Cameras for which there are photos by that Rover on that sol. landing_date : date property readonly + The Rover's landing date on Mars. Returns: Type Description date An datetime.date object. launch_date : date property readonly + The Rover's launch date from Earth. Returns: Type Description date An datetime.date object. max_date : date property readonly + The most recent Earth date from which photos exist. Returns: Type Description date An datetime.date object. __hash__ ( self ) special + Returns: Type Description int hash of the class. Source code in marsworks\\manifest.py def __hash__ ( self ) -> int : \"\"\" Returns: hash of the class. \"\"\" return hash ( self . __class__ ) __repr__ ( self ) special + Returns: Type Description str Representation of Manifest. Source code in marsworks\\manifest.py def __repr__ ( self ) -> str : \"\"\" Returns: Representation of Manifest. \"\"\" fil = filter ( lambda attr : not attr [ 0 ] . startswith ( \"_\" ) and not callable ( getattr ( self , attr [ 0 ], None )), inspect . getmembers ( self ), ) rpr = \"\" . join ( f \" { i [ 0 ] } = { i [ 1 ] } , \" for i in fil )[: - 2 ] return f \" { __class__ . __name__ } ( { rpr } )\" __str__ ( self ) special + Returns: Type Description str Name of the Rover. Source code in marsworks\\manifest.py def __str__ ( self ) -> str : \"\"\" Returns: Name of the Rover. \"\"\" return self . name search_camera ( self , camera ) + Looks for the camera supplied. Parameters: Name Type Description Default camera str The camera to look for. (Must be in Upper case and short name. like: PANCAM ) required Returns: Type Description list list of cameras with that name. Source code in marsworks\\manifest.py def search_camera ( self , camera : str ) -> list : \"\"\" Looks for the camera supplied. Args: camera: The camera to look for. (Must be in Upper case and short name. like: `PANCAM`) Returns: list of cameras with that name. \"\"\" # noqa: E501 camdata = self . cameras if isinstance ( camdata , list ): try : fcam = filter ( lambda c : c [ \"name\" ] == camera , camdata ) return list ( fcam ) except KeyError : raise BadContentError ( content = camdata ) from None else : raise BadContentError ( message = f \"can't iterate over < { camdata } >.\" )","title":"Manifest"},{"location":"API-Reference/manifest.html#marsworks.manifest.Manifest.landing_date","text":"The Rover's landing date on Mars. Returns: Type Description date An datetime.date object.","title":"landing_date"},{"location":"API-Reference/manifest.html#marsworks.manifest.Manifest.launch_date","text":"The Rover's launch date from Earth. Returns: Type Description date An datetime.date object.","title":"launch_date"},{"location":"API-Reference/manifest.html#marsworks.manifest.Manifest.max_date","text":"The most recent Earth date from which photos exist. Returns: Type Description date An datetime.date object.","title":"max_date"},{"location":"API-Reference/manifest.html#marsworks.manifest.Manifest.__hash__","text":"Returns: Type Description int hash of the class. Source code in marsworks\\manifest.py def __hash__ ( self ) -> int : \"\"\" Returns: hash of the class. \"\"\" return hash ( self . __class__ )","title":"__hash__()"},{"location":"API-Reference/manifest.html#marsworks.manifest.Manifest.__repr__","text":"Returns: Type Description str Representation of Manifest. Source code in marsworks\\manifest.py def __repr__ ( self ) -> str : \"\"\" Returns: Representation of Manifest. \"\"\" fil = filter ( lambda attr : not attr [ 0 ] . startswith ( \"_\" ) and not callable ( getattr ( self , attr [ 0 ], None )), inspect . getmembers ( self ), ) rpr = \"\" . join ( f \" { i [ 0 ] } = { i [ 1 ] } , \" for i in fil )[: - 2 ] return f \" { __class__ . __name__ } ( { rpr } )\"","title":"__repr__()"},{"location":"API-Reference/manifest.html#marsworks.manifest.Manifest.__str__","text":"Returns: Type Description str Name of the Rover. Source code in marsworks\\manifest.py def __str__ ( self ) -> str : \"\"\" Returns: Name of the Rover. \"\"\" return self . name","title":"__str__()"},{"location":"API-Reference/manifest.html#marsworks.manifest.Manifest.search_camera","text":"Looks for the camera supplied. Parameters: Name Type Description Default camera str The camera to look for. (Must be in Upper case and short name. like: PANCAM ) required Returns: Type Description list list of cameras with that name. Source code in marsworks\\manifest.py def search_camera ( self , camera : str ) -> list : \"\"\" Looks for the camera supplied. Args: camera: The camera to look for. (Must be in Upper case and short name. like: `PANCAM`) Returns: list of cameras with that name. \"\"\" # noqa: E501 camdata = self . cameras if isinstance ( camdata , list ): try : fcam = filter ( lambda c : c [ \"name\" ] == camera , camdata ) return list ( fcam ) except KeyError : raise BadContentError ( content = camdata ) from None else : raise BadContentError ( message = f \"can't iterate over < { camdata } >.\" )","title":"search_camera()"},{"location":"API-Reference/photo.html","text":"A class representing a Photo. Attributes: Name Type Description photo_id int ID of the photo. sol int Sol when the photo was taken. img_src str Image url. camera_full_name : Optional [ str ] property readonly + Full-Name of camera with which photo was taken. Returns: Type Description Optional[str] The full-name as a string. camera_id : Optional [ int ] property readonly + ID of camera with which photo was taken. Returns: Type Description Optional[int] The id as an integer. camera_name : Optional [ str ] property readonly + Name of camera with which photo was taken. Returns: Type Description Optional[str] The name as a string. camera_rover_id : Optional [ int ] property readonly + Rover id on which this camera is present. Returns: Type Description Optional[int] The rover id as an integer. rover_id : Optional [ int ] property readonly + Similar to camera_rover_id . Returns: Type Description Optional[int] The rover id as an integer. rover_landing_date : Optional [ datetime . date ] property readonly + The Rover's landing date on Mars. Returns: Type Description Optional[datetime.date] An datetime.date object. rover_launch_date : Optional [ datetime . date ] property readonly + The Rover's launch date from Earth. Returns: Type Description Optional[datetime.date] An datetime.date object. rover_name : Optional [ str ] property readonly + Name of rover which took the photo. Returns: Type Description Optional[str] The name as a string. rover_status : Optional [ str ] property readonly + The Rover's mission status. Returns: Type Description Optional[str] The rover's mission status as string.","title":"Photo"},{"location":"API-Reference/photo.html#marsworks.photo.Photo.camera_full_name","text":"Full-Name of camera with which photo was taken. Returns: Type Description Optional[str] The full-name as a string.","title":"camera_full_name"},{"location":"API-Reference/photo.html#marsworks.photo.Photo.camera_id","text":"ID of camera with which photo was taken. Returns: Type Description Optional[int] The id as an integer.","title":"camera_id"},{"location":"API-Reference/photo.html#marsworks.photo.Photo.camera_name","text":"Name of camera with which photo was taken. Returns: Type Description Optional[str] The name as a string.","title":"camera_name"},{"location":"API-Reference/photo.html#marsworks.photo.Photo.camera_rover_id","text":"Rover id on which this camera is present. Returns: Type Description Optional[int] The rover id as an integer.","title":"camera_rover_id"},{"location":"API-Reference/photo.html#marsworks.photo.Photo.rover_id","text":"Similar to camera_rover_id . Returns: Type Description Optional[int] The rover id as an integer.","title":"rover_id"},{"location":"API-Reference/photo.html#marsworks.photo.Photo.rover_landing_date","text":"The Rover's landing date on Mars. Returns: Type Description Optional[datetime.date] An datetime.date object.","title":"rover_landing_date"},{"location":"API-Reference/photo.html#marsworks.photo.Photo.rover_launch_date","text":"The Rover's launch date from Earth. Returns: Type Description Optional[datetime.date] An datetime.date object.","title":"rover_launch_date"},{"location":"API-Reference/photo.html#marsworks.photo.Photo.rover_name","text":"Name of rover which took the photo. Returns: Type Description Optional[str] The name as a string.","title":"rover_name"},{"location":"API-Reference/photo.html#marsworks.photo.Photo.rover_status","text":"The Rover's mission status. Returns: Type Description Optional[str] The rover's mission status as string.","title":"rover_status"},{"location":"API-Reference/Choices/camera.html","text":"Attributes: Name Type Description FHAZ str Front Hazard Avoidance Camera RHAZ str Rear Hazard Avoidance Camera MAST str Mast Camera CHEMCAM str Chemistry and Camera Complex MAHLI str Mars Hand Lens Imager MARDI str Mars Descent Imager NAVCAM str Navigation Camera PANCAM str Panoramic Camera MINITES str Miniature Thermal Emission Spectrometer (Mini-TES) Note All above mentioned attributes are class attributes. Note This class is an iterable.","title":"Camera"},{"location":"API-Reference/Choices/rover.html","text":"Attributes: Name Type Description CURIOSITY str Mars Science Laboratory mission, Curiosity. OPPORTUNITY str Mars Exploration Rover \u2013 B, Opportunity. SPIRIT str Mars Exploration Rover \u2013 A, Spirit. Note All above mentioned attributes are class attributes. Note This class is an iterable.","title":"Rover"}]}